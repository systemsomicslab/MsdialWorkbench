<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converter="clr-namespace:CompMs.CommonMVVM.Converter;assembly=CommonMVVM"
                    xmlns:ui="clr-namespace:CompMs.Graphics.UI;assembly=ChartDrawing"
                    xmlns:do="clr-namespace:CompMs.MsdialCore.DataObj;assembly=MsdialCore"
                    xmlns:if="clr-namespace:CompMs.Common.Interfaces;assembly=Common"
                    xmlns:converter2="clr-namespace:CompMs.Graphics.Converter;assembly=ChartDrawing">
    <BooleanToVisibilityConverter x:Key="BooleanToVisibility"/>
    <converter:BooleanToEnumConverter x:Key="EnumToBoolean"/>
    <converter:CBoolNegativeConverter x:Key="NegativeConverter"/>
    <converter:BooleanAllConverter x:Key="BooleanAll"/>
    <converter:BooleanAnyConverter x:Key="BooleanAny"/>
    <converter2:AreEqualsConverter x:Key="AreEquals"/>
    <converter:AdductIonConverter x:Key="AdductIonConverter"/>
    <converter2:MultiIdentityConverter x:Key="MultiId"/>

    <ControlTemplate x:Key="InputErrorTemplate">
        <DockPanel>
            <TextBlock Text="{Binding AdornedElement.(Validation.Errors)/ErrorContent, ElementName=adornedElem}" Foreground="Red" FontSize="9" DockPanel.Dock="Bottom"/>
            <TextBlock DockPanel.Dock="Right" Text="!" Foreground="Red" FontSize="18" FontWeight="Bold" Margin="5,2"/>
            <AdornedElementPlaceholder x:Name="adornedElem"/>
        </DockPanel>
    </ControlTemplate>

    <Style x:Key="ToolTipErrorStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource InputErrorTemplate}"/>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding Path=(Validation.Errors)[0].ErrorContent, RelativeSource={RelativeSource Self}}" />
                <Setter Property="BorderBrush" Value="Pink" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="BasicErrorTemplate">
        <StackPanel>
            <Border BorderBrush="Red" BorderThickness="0,0,0,1">
                <AdornedElementPlaceholder x:Name="adornedElem"/>
            </Border>
            <TextBlock Text="{Binding AdornedElement.(Validation.Errors)/ErrorContent, ElementName=adornedElem}" Foreground="Red"/>
        </StackPanel>
    </ControlTemplate>

    <Style TargetType="GridSplitter">
        <Setter Property="Background" Value="Gray" />
    </Style>

    <Style TargetType="Border" x:Key="WindowBorder">
        <Setter Property="BorderBrush" Value="Gray" />
        <Setter Property="BorderThickness" Value="2" />
    </Style>

    <Style TargetType="Menu">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush>
                    <SolidColorBrush.Color>
                        <Color A="255" R="130" G="170" B="200"/>
                    </SolidColorBrush.Color>
                </SolidColorBrush>
            </Setter.Value>
        </Setter>

        <Setter Property="Foreground" Value="Black" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Gray" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
    </Style>

    <Style TargetType="ContextMenu">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Gray" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
    </Style>

    <Style x:Key="ReadOnlyTextBox" TargetType="TextBox">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="IsReadOnly" Value="True" />
    </Style>

    <!-- ui:LabeledContent -->
    <Style TargetType="ui:LabeledContent">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ui:LabeledContent">
                    <Grid HorizontalAlignment="Stretch">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Label Content="{TemplateBinding PrependLabel}"
                               VerticalAlignment="Stretch" VerticalContentAlignment="Center"
                               Margin="0,0,8,0"
                               Grid.Column="0"/>
                        <ContentPresenter VerticalAlignment="Stretch"
                                          Grid.Column="1"/>
                        <Label Content="{TemplateBinding AppendLabel}"
                               VerticalAlignment="Stretch" VerticalContentAlignment="Center"
                               Margin="8,0,0,0"
                               Grid.Column="2"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AlignedContent" TargetType="ui:LabeledContent">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ui:LabeledContent">
                    <Grid HorizontalAlignment="Stretch">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="80"/>
                        </Grid.ColumnDefinitions>

                        <Label Content="{TemplateBinding PrependLabel}"
                               VerticalAlignment="Center" VerticalContentAlignment="Center"
                               Margin="0,0,8,0"
                               Grid.Column="0"/>
                        <ContentPresenter VerticalAlignment="Center"
                                          Grid.Column="1"/>
                        <Label Content="{TemplateBinding AppendLabel}"
                               VerticalAlignment="Center" VerticalContentAlignment="Center"
                               Grid.Column="2"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DetailContent" TargetType="ui:LabeledContent">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ui:LabeledContent">
                    <Grid HorizontalAlignment="Stretch">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="120"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <TextBlock Text="{TemplateBinding PrependLabel}"
                                   VerticalAlignment="Center"
                                   Margin="0,0,8,0"
                                   Grid.Column="0"/>
                        <ContentPresenter VerticalAlignment="Center"
                                          Grid.Column="1"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CopyableDetailContent" TargetType="ui:LabeledContent"
           BasedOn="{StaticResource DetailContent}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBox Text="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
                             Style="{StaticResource ReadOnlyTextBox}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ChromXCollapseContent" TargetType="ui:LabeledContent"
           BasedOn="{StaticResource DetailContent}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBox Text="{Binding Path=Content, StringFormat=N4, RelativeSource={RelativeSource TemplatedParent}}"
                             Style="{StaticResource ReadOnlyTextBox}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Visibility" Value="Visible"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Content, TargetNullValue=-1, RelativeSource={RelativeSource Self}}"
                         Value="-1">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger> 
        </Style.Triggers>
    </Style>

    <Style x:Key="CollapseIfZeroContent" TargetType="ui:LabeledContent"
           BasedOn="{StaticResource DetailContent}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBox Text="{Binding Path=Content, StringFormat=N4, RelativeSource={RelativeSource TemplatedParent}}"
                             Style="{StaticResource ReadOnlyTextBox}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Visibility" Value="Visible"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Content, TargetNullValue=0, RelativeSource={RelativeSource Self}}"
                         Value="0">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger> 
        </Style.Triggers>
    </Style>

    <Style x:Key="AlignedLabeledBar" TargetType="ui:LabeledBar">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ui:LabeledBar">
                    <Grid HorizontalAlignment="Stretch">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="80"/>
                        </Grid.ColumnDefinitions>

                        <Label Content="{TemplateBinding Label}"
                               Width="{TemplateBinding LabelWidth}"
                               VerticalAlignment="Center"
                               VerticalContentAlignment="Center"
                               HorizontalAlignment="Left"
                               Margin="0,0,10,0"
                               Grid.Column="0"/>
                        <ContentPresenter VerticalAlignment="Center"
                                          Grid.Column="1"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="AlignedExecutableBar" TargetType="ui:ExecutableBar">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ui:ExecutableBar">
                    <Grid HorizontalAlignment="Stretch">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="80"/>
                        </Grid.ColumnDefinitions>

                        <Label Content="{TemplateBinding Label}"
                               Width="{TemplateBinding LabelWidth}"
                               VerticalAlignment="Center"
                               VerticalContentAlignment="Center"
                               HorizontalAlignment="Left"
                               Margin="0,0,10,0"
                               Grid.Column="0"/>
                        <ContentPresenter VerticalAlignment="Center"
                                          Grid.Column="1"/>
                        <Button Content="{TemplateBinding ButtonContent}"
                                Width="{TemplateBinding ButtonWidth}"
                                Command="{TemplateBinding Command}"
                                CommandParameter="{TemplateBinding CommandParameter}"
                                VerticalAlignment="Stretch"
                                IsEnabled="{TemplateBinding CommandIsEnabled}"
                                Margin="4"
                                TabIndex="{TemplateBinding TabIndex}"
                                Grid.Column="2"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--CompoundSearch properties template-->
    <DataTemplate x:Key="FileInfoTemplate">
        <StackPanel>
            <StackPanel.Resources>
                <Style TargetType="ui:LabeledContent" BasedOn="{StaticResource CopyableDetailContent}"/>
            </StackPanel.Resources>
            <TextBlock Text="File information" FontStyle="Italic"
                       HorizontalAlignment="Left"/>
            <Separator/>
            <ui:LabeledContent PrependLabel="File ID:"
                               Content="{Binding Path=(do:IFileBean.FileID), Mode=OneWay}"/>
            <ui:LabeledContent PrependLabel="File name:"
                               Content="{Binding Path=(do:IFileBean.FileName), Mode=OneWay}"/>
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="PeakInfoTemplate">
        <StackPanel>
            <StackPanel.Resources>
                <Style TargetType="ui:LabeledContent" BasedOn="{StaticResource DetailContent}"/>
            </StackPanel.Resources>
            <TextBlock Text="Peak information" FontStyle="Italic"
                       HorizontalAlignment="Left"/>
            <Separator/>
            <ui:LabeledContent PrependLabel="Molecular species:"
                               Content="{Binding Path=(if:IIonProperty.AdductType), Mode=OneWay}"
                               Style="{StaticResource CopyableDetailContent}"/>
            <ui:LabeledContent PrependLabel="Accurate mass:">
                <TextBox Text="{Binding Path=(if:IMSProperty.PrecursorMz), StringFormat=N5, Mode=OneWay}" Style="{StaticResource ReadOnlyTextBox}"/>
            </ui:LabeledContent>
            <ui:LabeledContent PrependLabel="Retention time:"
                               Content="{Binding Path=(if:IMSProperty.ChromXs).RT.Value, Mode=OneWay}"
                               Style="{StaticResource ChromXCollapseContent}"/>
            <ui:LabeledContent PrependLabel="Retention index:"
                               Content="{Binding Path=(if:IMSProperty.ChromXs).RI.Value, Mode=OneWay}"
                               Style="{StaticResource ChromXCollapseContent}"/>
            <ui:LabeledContent PrependLabel="Drift time:"
                               Content="{Binding Path=(if:IMSProperty.ChromXs).Drift.Value, Mode=OneWay}"
                               Style="{StaticResource ChromXCollapseContent}"/>
            <ui:LabeledContent PrependLabel="Collision cross section:"
                               Content="{Binding Path=(if:IIonProperty.CollisionCrossSection), Mode=OneWay}"
                               Style="{StaticResource CollapseIfZeroContent}"/>
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="AnnotationInfoTemplate">
        <StackPanel>
            <StackPanel.Resources>
                <Style TargetType="ui:LabeledContent" BasedOn="{StaticResource DetailContent}"/>
            </StackPanel.Resources>
            <TextBlock Text="Annotation information" FontStyle="Italic"
                       HorizontalAlignment="Left"/>
            <Separator/>
            <ui:LabeledContent PrependLabel="Identified:">
                <TextBox>
                    <TextBox.Style>
                        <Style BasedOn="{StaticResource ReadOnlyTextBox}" TargetType="TextBox">
                            <Setter Property="Text" Value="{Binding Path=(if:IMoleculeProperty.Name), Mode=OneWay}"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=(if:IMoleculeProperty.Name), Mode=OneWay, TargetNullValue=''}" Value="">
                                    <Setter Property="Text" Value="Unknown"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBox.Style>
                </TextBox>
            </ui:LabeledContent>
            <ui:LabeledContent PrependLabel="Ontology:"
                               Content="{Binding Path=(if:IMoleculeProperty.Ontology), Mode=OneWay}"
                               Style="{StaticResource CopyableDetailContent}"/>
            <ui:LabeledContent PrependLabel="Formula:"
                               Content="{Binding Path=(if:IMoleculeProperty.Formula).FormulaString, Mode=OneWay}"
                               Style="{StaticResource CopyableDetailContent}"/>
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="SpectrumInfoTemplate">
        <StackPanel>
            <StackPanel.Resources>
                <Style TargetType="ui:LabeledContent" BasedOn="{StaticResource DetailContent}"/>
            </StackPanel.Resources>
            <TextBlock Text="MS information" FontStyle="Italic"
                       HorizontalAlignment="Left"/>
            <Separator/>
            <ui:LabeledContent PrependLabel="Quant mass:">
                <TextBox Text="{Binding Path=QuantifiedChromatogramPeak.PeakFeature.Mass, StringFormat=F5, Mode=OneWay}" Style="{StaticResource ReadOnlyTextBox}"/>
            </ui:LabeledContent>
            <ui:LabeledContent PrependLabel="Retention time:"
                               Content="{Binding Path=QuantifiedChromatogramPeak.PeakFeature.ChromXsTop.RT.Value, Mode=OneWay}"
                               Style="{StaticResource ChromXCollapseContent}"/>
            <ui:LabeledContent PrependLabel="Retention index:"
                               Content="{Binding Path=QuantifiedChromatogramPeak.PeakFeature.ChromXsTop.RI.Value, Mode=OneWay}"
                               Style="{StaticResource ChromXCollapseContent}"/>
            <ui:LabeledContent PrependLabel="Identified:">
                <TextBox>
                    <TextBox.Style>
                        <Style BasedOn="{StaticResource ReadOnlyTextBox}" TargetType="TextBox">
                            <Setter Property="Text" Value="{Binding Path=Molecule.Name, Mode=OneWay}"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=Molecule.Name, Mode=OneWay, TargetNullValue=''}" Value="">
                                    <Setter Property="Text" Value="Unknown"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBox.Style>
                </TextBox>
            </ui:LabeledContent>
            <ui:LabeledContent PrependLabel="Ontology:"
                               Content="{Binding Path=Molecule.Ontology, Mode=OneWay}"
                               Style="{StaticResource CopyableDetailContent}"/>
            <ui:LabeledContent PrependLabel="Formula:"
                               Content="{Binding Path=Molecule.Formula, Mode=OneWay}"
                               Style="{StaticResource CopyableDetailContent}"/>
        </StackPanel>
    </DataTemplate>

    <!-- RangeSlider -->
    <Style TargetType="{x:Type rs:RangeSlider}"
           x:Key="EditableRangeSlider"
           xmlns:rs="clr-namespace:CompMs.Graphics.UI.RangeSlider;assembly=ChartDrawing">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type rs:RangeSlider}">
                    <Grid>
                        <Grid.Resources>
                            <ControlTemplate x:Key="simpleSlider" TargetType="Slider">
                                <Border SnapsToDevicePixels="True"
                                        BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Rectangle x:Name="PART_SelectionRange"/>
                                        <Track x:Name="PART_Track" Grid.Row="1">
                                            <Track.Thumb>
                                                <Thumb x:Name="Thumb">
                                                    <Thumb.Template>
                                                        <ControlTemplate TargetType="Thumb">
                                                            <Rectangle Fill="{x:Static SystemColors.ControlBrush}"
                                                                       Stroke="{x:Static SystemColors.ActiveBorderBrush}"
                                                                       StrokeThickness="1"
                                                                       Width="10" Height="18"
                                                                       SnapsToDevicePixels="True"/>
                                                        </ControlTemplate>
                                                    </Thumb.Template>
                                                </Thumb>
                                            </Track.Thumb>
                                        </Track>
                                    </Grid>
                                </Border>
                            </ControlTemplate>
                        </Grid.Resources>

                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <TextBox Text="{Binding LowerValue, RelativeSource={RelativeSource Mode=TemplatedParent}, StringFormat=F4}"
                                 TextAlignment="Center"
                                 Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2"/>
                        <TextBlock Text="{TemplateBinding Tag}"
                                   Margin="10,0"
                                   Grid.Row="0" Grid.Column="2"/>
                        <TextBox Text="{Binding UpperValue, RelativeSource={RelativeSource Mode=TemplatedParent}, StringFormat=F4}"
                                 TextAlignment="Center"
                                 Grid.Row="0" Grid.Column="3" Grid.ColumnSpan="2"/>

                        <Rectangle Fill="{x:Static SystemColors.ControlBrush}"
                                   Stroke="{x:Static SystemColors.ActiveBorderBrush}"
                                   StrokeThickness="1"
                                   VerticalAlignment="Center"
                                   Height="5" Margin="5,0"
                                   Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="3"/>
                        <Slider x:Name="PART_LowerRange"
                                VerticalAlignment="Center"
                                Template="{StaticResource simpleSlider}"
                                Margin="0,0,10,0"
                                Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="3"/>
                        <Slider x:Name="PART_UpperRange"
                                VerticalAlignment="Center"
                                Template="{StaticResource simpleSlider}"
                                Margin="10,0,0,0"
                                Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="3"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="CheckBox" x:Key="IconCheckBox">
        <Setter Property="FontWeight" Value="Heavy"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <ControlTemplate.Resources>
                        <Style TargetType="TextBlock" x:Key="BaseTextBlock">
                            <Setter Property="FontSize" Value="8"/>
                            <Setter Property="Height" Value="10"/>
                            <Setter Property="Width" Value="10"/>
                            <Setter Property="TextAlignment" Value="Center"/>
                            <Setter Property="VerticalAlignment" Value="Top"/>
                            <Setter Property="HorizontalAlignment" Value="Center"/>
                        </Style>
                        <Style TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlock}" x:Key="IfCheckedStyle">
                            <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Style>
                        <Style TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlock}" x:Key="IfNotCheckedStyle">
                            <Setter Property="Foreground" Value="Gray"/>
                            <Setter Property="Background" Value="Transparent"/>
                        </Style>
                    </ControlTemplate.Resources>
                    <Border BorderThickness="1" BorderBrush="LightGray"
                            Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"
                            VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                        <Viewbox Stretch="Uniform">
                            <Grid>
                                <TextBlock x:Name="CheckMark"
                                           Text="{TemplateBinding Content}"
                                           FontFamily="{TemplateBinding FontFamily}"
                                           FontStyle="{TemplateBinding FontStyle}"
                                           FontWeight="{TemplateBinding FontWeight}">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Setter Property="FontSize" Value="8"/>
                                            <Setter Property="Height" Value="10"/>
                                            <Setter Property="Width" Value="10"/>
                                            <Setter Property="TextAlignment" Value="Center"/>
                                            <Setter Property="VerticalAlignment" Value="Top"/>
                                            <Setter Property="HorizontalAlignment" Value="Center"/>
                                            <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                            <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                                                    <Setter Property="Foreground" Value="Gray"/>
                                                    <Setter Property="Background" Value="Transparent"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </Grid>
                        </Viewbox>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="EditPeakSpotTag">
        <StackPanel Orientation="Horizontal">
            <ToolTipService.ToolTip>
                <TextBlock TextAlignment="Left">
                    Check: Confirmed (Ctrl+1)<LineBreak/>
                    L: Low quality spectrum (Ctrl+2)<LineBreak/>
                    M: Misannotation (Ctrl+3)<LineBreak/>
                    C: Coelution(mixed spectra) (Ctrl+4)<LineBreak/>
                    O: Overannotation (Ctrl+5)
                </TextBlock>
            </ToolTipService.ToolTip>
            <CheckBox IsChecked="{Binding Confirmed, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="&#xE73E;" FontFamily="Segoe MDL2 Assets" Foreground="White" Background="Green" Style="{StaticResource IconCheckBox}"/>
            <CheckBox IsChecked="{Binding LowQualitySpectrum, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="L" Foreground="White" Background="Red" Style="{StaticResource IconCheckBox}"/>
            <CheckBox IsChecked="{Binding Misannotation, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="M" Foreground="White" Background="Red" Style="{StaticResource IconCheckBox}"/>
            <CheckBox IsChecked="{Binding Coelution, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="C" Foreground="White" Background="Red" Style="{StaticResource IconCheckBox}"/>
            <CheckBox IsChecked="{Binding Overannotation, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="O" Foreground="White" Background="Red" Style="{StaticResource IconCheckBox}"/>
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="FilteringPeakSpotTag" DataType="{x:Type searchVM:PeakSpotTagSearchQueryBuilderViewModel}"
                  xmlns:searchVM="clr-namespace:CompMs.App.Msdial.ViewModel.Search">
        <StackPanel Orientation="Horizontal">
            <TextBlock Text="Tag filter:" FontSize="12" Margin="0,0,8,0"/>
            <CheckBox IsChecked="{Binding Confirmed.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="&#xE73E;" FontFamily="Segoe MDL2 Assets" Foreground="White" Background="Green" Style="{StaticResource IconCheckBox}"/>
            <CheckBox IsChecked="{Binding LowQualitySpectrum.Value, Mode=TwoWay}" Content="L" Foreground="White" Background="Red" Style="{StaticResource IconCheckBox}"/>
            <CheckBox IsChecked="{Binding Misannotation.Value, Mode=TwoWay}" Content="M" Foreground="White" Background="Red" Style="{StaticResource IconCheckBox}"/>
            <CheckBox IsChecked="{Binding Coelution.Value, Mode=TwoWay}" Content="C" Foreground="White" Background="Red" Style="{StaticResource IconCheckBox}"/>
            <CheckBox IsChecked="{Binding Overannotation.Value, Mode=TwoWay}" Content="O" Foreground="White" Background="Red" Style="{StaticResource IconCheckBox}"/>

            <CheckBox Content="Exclude tagged peaks" IsChecked="{Binding Excludes.Value, Mode=TwoWay}" Margin="8,0" VerticalAlignment="Center" FontSize="12"/>
        </StackPanel>
    </DataTemplate>

    <Style TargetType="RadioButton" x:Key="IconRadioButton">
        <Setter Property="Height" Value="32"/>
        <Setter Property="Width" Value="32"/>
        <Setter Property="Margin" Value="4"/>
        <Setter Property="Opacity" Value="1"/>
        <Setter Property="BorderBrush" Value="Aqua"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Border x:Name="Frame"
                            BorderBrush="{Binding Path=BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                            BorderThickness="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"
                            CornerRadius="1">
                        <Image x:Name="Icon" Source="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="BorderThickness" Value="0"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.3"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate TargetType="ToggleButton" x:Key="ExpanderLikeToggleButton">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <TextBlock Text="&#xEA3A;" FontFamily="Segoe MDL2 Assets" Width="{Binding Height, RelativeSource={RelativeSource Self}}"
                       VerticalAlignment="Center" HorizontalAlignment="Center"
                       Grid.Column="0"/>
            <ContentPresenter Grid.Column="1" Margin="4,0,0,0"/>
            <TextBlock Text="&#xE96E;" FontFamily="Segoe MDL2 Assets" Width="{Binding Height, RelativeSource={RelativeSource Self}}"
                       VerticalAlignment="Center" HorizontalAlignment="Center"
                       Grid.Column="0">
                <TextBlock.LayoutTransform>
                    <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="0.7" ScaleY="0.7"/>
                </TextBlock.LayoutTransform>
            </TextBlock>
            <ContentPresenter Grid.Column="1" Margin="4,0,0,0"/>
        </Grid>
    </ControlTemplate>

    <Style TargetType="RibbonTab" x:Key="FocusWhenVisible">
        <Style.Triggers>
            <Trigger Property="Visibility" Value="Visible">
                <Setter Property="IsSelected" Value="True"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--TabItem Template-->
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="TabItem.Static.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#F0F0F0" Offset="0.0"/>
        <GradientStop Color="#E5E5E5" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="TabItem.Static.Border" Color="#ACACAC"/>
    <LinearGradientBrush x:Key="TabItem.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#ECF4FC" Offset="0.0"/>
        <GradientStop Color="#DCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="#7EB4EA"/>
    <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#FFFFFF"/>
    <SolidColorBrush x:Key="TabItem.Selected.Border" Color="#ACACAC"/>
    <SolidColorBrush x:Key="TabItem.Disabled.Background" Color="#F0F0F0"/>
    <SolidColorBrush x:Key="TabItem.Disabled.Border" Color="#D9D9D9"/>

    <Style x:Key="MainWindowTabItemStyle" TargetType="{x:Type TabItem}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding}" Value="{x:Null}">
                <Setter Property="IsEnabled" Value="False"/>
            </DataTrigger>
        </Style.Triggers>

        <Setter Property="IsEnabled" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderBrush" Value="{StaticResource TabItem.Static.Border}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>

        <Setter Property="Background" Value="{StaticResource MainThemeColor}"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Padding" Value="8,0"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Border x:Name="mainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Margin="0">
                            <Border x:Name="innerBorder" Background="{StaticResource TabItem.Selected.Background}" BorderBrush="{StaticResource TabItem.Selected.Border}" BorderThickness="1,1,1,0" Margin="-1" Opacity="0"/>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,-2,-2,0"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>