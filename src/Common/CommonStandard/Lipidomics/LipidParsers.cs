// <auto-generated>
// THIS (.cs) FILE IS GENERATED. DO NOT CHANGE IT.
// CHANGE THE .tt FILE INSTEAD.
// </auto-generated>

using CompMs.Common.Enum;
using CompMs.Common.FormulaGenerator.DataObj;
using System.Linq;
using System.Text.RegularExpressions;

namespace CompMs.Common.Lipidomics
{

    public class PCLipidParser : ILipidParser {
        public string Target { get; } = "PC";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^PC\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 8,
            MassDiffDictionary.HydrogenMass * 18,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                if (chains.OxidizedCount > 0)
                {
                    return new Lipid(LbmClass.OxPC, Skelton + chains.Mass, chains);
                }
                return new Lipid(LbmClass.PC, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class PELipidParser : ILipidParser {
        public string Target { get; } = "PE";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^PE\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 5,
            MassDiffDictionary.HydrogenMass * 12,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                if (chains.OxidizedCount > 0)
                {
                    return new Lipid(LbmClass.OxPE, Skelton + chains.Mass, chains);
                }
                return new Lipid(LbmClass.PE, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class PALipidParser : ILipidParser {
        public string Target { get; } = "PA";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^PA\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 3,
            MassDiffDictionary.HydrogenMass * 7,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.PA, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class PGLipidParser : ILipidParser {
        public string Target { get; } = "PG";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^PG\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 6,
            MassDiffDictionary.HydrogenMass * 13,
            MassDiffDictionary.OxygenMass * 8,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                if (chains.OxidizedCount > 0)
                {
                    return new Lipid(LbmClass.OxPG, Skelton + chains.Mass, chains);
                }
                return new Lipid(LbmClass.PG, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class PILipidParser : ILipidParser {
        public string Target { get; } = "PI";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^PI\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 9,
            MassDiffDictionary.HydrogenMass * 17,
            MassDiffDictionary.OxygenMass * 11,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                if (chains.OxidizedCount > 0)
                {
                    return new Lipid(LbmClass.OxPI, Skelton + chains.Mass, chains);
                }
                return new Lipid(LbmClass.PI, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class PSLipidParser : ILipidParser {
        public string Target { get; } = "PS";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^PS\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 6,
            MassDiffDictionary.HydrogenMass * 12,
            MassDiffDictionary.OxygenMass * 8,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                if (chains.OxidizedCount > 0)
                {
                    return new Lipid(LbmClass.OxPS, Skelton + chains.Mass, chains);
                }
                return new Lipid(LbmClass.PS, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class PTLipidParser : ILipidParser {
        public string Target { get; } = "PT";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^PT\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 7,
            MassDiffDictionary.HydrogenMass * 14,
            MassDiffDictionary.OxygenMass * 8,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.PT, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class EtherPGLipidParser : ILipidParser {
        public string Target { get; } = "PG";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildEtherParser(2);
        public static readonly string Pattern = $"^PG\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 6,
            MassDiffDictionary.HydrogenMass * 13,
            MassDiffDictionary.OxygenMass * 8,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.EtherPG, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class EtherLPGLipidParser : ILipidParser {
        public string Target { get; } = "LPG";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildLysoEtherParser(1, 2);
        public static readonly string Pattern = $"^LPG\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 6,
            MassDiffDictionary.HydrogenMass * 13,
            MassDiffDictionary.OxygenMass * 8,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.EtherLPG, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class EtherPILipidParser : ILipidParser {
        public string Target { get; } = "PI";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildEtherParser(2);
        public static readonly string Pattern = $"^PI\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 9,
            MassDiffDictionary.HydrogenMass * 17,
            MassDiffDictionary.OxygenMass * 11,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.EtherPI, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class EtherPSLipidParser : ILipidParser {
        public string Target { get; } = "PS";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildEtherParser(2);
        public static readonly string Pattern = $"^PS\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 6,
            MassDiffDictionary.HydrogenMass * 12,
            MassDiffDictionary.OxygenMass * 8,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.EtherPS, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class MMPELipidParser : ILipidParser {
        public string Target { get; } = "MMPE";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^MMPE\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 6,
            MassDiffDictionary.HydrogenMass * 14,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.MMPE, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class DMPELipidParser : ILipidParser {
        public string Target { get; } = "DMPE";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^DMPE\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 7,
            MassDiffDictionary.HydrogenMass * 16,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.DMPE, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class bmPCLipidParser : ILipidParser {
        public string Target { get; } = "bmPC";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^bmPC\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 9,
            MassDiffDictionary.HydrogenMass * 20,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.bmPC, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class PMeOHLipidParser : ILipidParser {
        public string Target { get; } = "PMeOH";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^PMeOH\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 4,
            MassDiffDictionary.HydrogenMass * 9,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.PMeOH, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class PEtOHLipidParser : ILipidParser {
        public string Target { get; } = "PEtOH";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^PEtOH\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 5,
            MassDiffDictionary.HydrogenMass * 11,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.PEtOH, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class LPCLipidParser : ILipidParser {
        public string Target { get; } = "LPC";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 2);
        public static readonly string Pattern = $"^LPC\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 8,
            MassDiffDictionary.HydrogenMass * 18,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.LPC, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class LPELipidParser : ILipidParser {
        public string Target { get; } = "LPE";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 2);
        public static readonly string Pattern = $"^LPE\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 5,
            MassDiffDictionary.HydrogenMass * 12,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.LPE, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class LPGLipidParser : ILipidParser {
        public string Target { get; } = "LPG";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 2);
        public static readonly string Pattern = $"^LPG\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 6,
            MassDiffDictionary.HydrogenMass * 13,
            MassDiffDictionary.OxygenMass * 8,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.LPG, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class LPILipidParser : ILipidParser {
        public string Target { get; } = "LPI";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 2);
        public static readonly string Pattern = $"^LPI\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 9,
            MassDiffDictionary.HydrogenMass * 17,
            MassDiffDictionary.OxygenMass * 11,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.LPI, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class LPSLipidParser : ILipidParser {
        public string Target { get; } = "LPS";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 2);
        public static readonly string Pattern = $"^LPS\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 6,
            MassDiffDictionary.HydrogenMass * 12,
            MassDiffDictionary.OxygenMass * 8,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.LPS, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class LPALipidParser : ILipidParser {
        public string Target { get; } = "LPA";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 2);
        public static readonly string Pattern = $"^LPA\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 3,
            MassDiffDictionary.HydrogenMass * 7,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.LPA, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class BisMeLPALipidParser : ILipidParser {
        public string Target { get; } = "BisMeLPA";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 2);
        public static readonly string Pattern = $"^BisMeLPA\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 5,
            MassDiffDictionary.HydrogenMass * 11,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.BisMeLPA, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class GPNAELipidParser : ILipidParser {
        public string Target { get; } = "GPNAE";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 1);
        public static readonly string Pattern = $"^GPNAE\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 5,
            MassDiffDictionary.HydrogenMass * 13,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.GPNAE, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class LNAPSLipidParser : ILipidParser {
        public string Target { get; } = "LPS-N";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^LPS-N\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 6,
            MassDiffDictionary.HydrogenMass * 12,
            MassDiffDictionary.OxygenMass * 8,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.LNAPS, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class LNAPELipidParser : ILipidParser {
        public string Target { get; } = "LPE-N";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^LPE-N\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 5,
            MassDiffDictionary.HydrogenMass * 12,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.LNAPE, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class TGLipidParser : ILipidParser {
        public string Target { get; } = "TG";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(3);
        public static readonly string Pattern = $"^TG\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 3,
            MassDiffDictionary.HydrogenMass * 5,
            MassDiffDictionary.OxygenMass * 3,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                if (chains.OxidizedCount > 0)
                {
                    return new Lipid(LbmClass.OxTG, Skelton + chains.Mass, chains);
                }
                return new Lipid(LbmClass.TG, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class EtherTGLipidParser : ILipidParser {
        public string Target { get; } = "TG";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildEtherParser(3);
        public static readonly string Pattern = $"^TG\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 3,
            MassDiffDictionary.HydrogenMass * 5,
            MassDiffDictionary.OxygenMass * 3,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.EtherTG, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class MGLipidParser : ILipidParser {
        public string Target { get; } = "MG";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 2);
        public static readonly string Pattern = $"^MG\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 3,
            MassDiffDictionary.HydrogenMass * 6,
            MassDiffDictionary.OxygenMass * 3,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.MG, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class DGLipidParser : ILipidParser {
        public string Target { get; } = "DG";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^DG\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 3,
            MassDiffDictionary.HydrogenMass * 6,
            MassDiffDictionary.OxygenMass * 3,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.DG, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class EtherDGLipidParser : ILipidParser {
        public string Target { get; } = "DG";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildEtherParser(2);
        public static readonly string Pattern = $"^DG\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 3,
            MassDiffDictionary.HydrogenMass * 6,
            MassDiffDictionary.OxygenMass * 3,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.EtherDG, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class MGMGLipidParser : ILipidParser {
        public string Target { get; } = "MGMG";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 2);
        public static readonly string Pattern = $"^MGMG\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 9,
            MassDiffDictionary.HydrogenMass * 16,
            MassDiffDictionary.OxygenMass * 8,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.MGMG, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class MGDGLipidParser : ILipidParser {
        public string Target { get; } = "MGDG";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^MGDG\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 9,
            MassDiffDictionary.HydrogenMass * 16,
            MassDiffDictionary.OxygenMass * 8,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.MGDG, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class EtherMGDGLipidParser : ILipidParser {
        public string Target { get; } = "MGDG";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildEtherParser(2);
        public static readonly string Pattern = $"^MGDG\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 9,
            MassDiffDictionary.HydrogenMass * 16,
            MassDiffDictionary.OxygenMass * 8,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.EtherMGDG, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class DGMGLipidParser : ILipidParser {
        public string Target { get; } = "DGMG";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 2);
        public static readonly string Pattern = $"^DGMG\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 15,
            MassDiffDictionary.HydrogenMass * 26,
            MassDiffDictionary.OxygenMass * 13,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.DGMG, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class DGDGLipidParser : ILipidParser {
        public string Target { get; } = "DGDG";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^DGDG\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 15,
            MassDiffDictionary.HydrogenMass * 26,
            MassDiffDictionary.OxygenMass * 13,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.DGDG, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class EtherDGDGLipidParser : ILipidParser {
        public string Target { get; } = "DGDG";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildEtherParser(2);
        public static readonly string Pattern = $"^DGDG\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 15,
            MassDiffDictionary.HydrogenMass * 26,
            MassDiffDictionary.OxygenMass * 13,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.EtherDGDG, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class SMGDGLipidParser : ILipidParser {
        public string Target { get; } = "SMGDG";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^SMGDG\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 9,
            MassDiffDictionary.HydrogenMass * 16,
            MassDiffDictionary.OxygenMass * 11,
            MassDiffDictionary.SulfurMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.SMGDG, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class EtherSMGDGLipidParser : ILipidParser {
        public string Target { get; } = "SMGDG";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildEtherParser(2);
        public static readonly string Pattern = $"^SMGDG\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 9,
            MassDiffDictionary.HydrogenMass * 16,
            MassDiffDictionary.OxygenMass * 11,
            MassDiffDictionary.SulfurMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.EtherSMGDG, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class SQDGLipidParser : ILipidParser {
        public string Target { get; } = "SQDG";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^SQDG\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 9,
            MassDiffDictionary.HydrogenMass * 16,
            MassDiffDictionary.OxygenMass * 10,
            MassDiffDictionary.SulfurMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.SQDG, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class CARLipidParser : ILipidParser {
        public string Target { get; } = "CAR";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(1);
        public static readonly string Pattern = $"^CAR\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 7,
            MassDiffDictionary.HydrogenMass * 14,
            MassDiffDictionary.OxygenMass * 3,
            MassDiffDictionary.NitrogenMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.CAR, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class DGTALipidParser : ILipidParser {
        public string Target { get; } = "DGTA";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^DGTA\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 10,
            MassDiffDictionary.HydrogenMass * 19,
            MassDiffDictionary.OxygenMass * 5,
            MassDiffDictionary.NitrogenMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.DGTA, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class DGTSLipidParser : ILipidParser {
        public string Target { get; } = "DGTS";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^DGTS\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 10,
            MassDiffDictionary.HydrogenMass * 19,
            MassDiffDictionary.OxygenMass * 5,
            MassDiffDictionary.NitrogenMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.DGTS, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class LDGTALipidParser : ILipidParser {
        public string Target { get; } = "LDGTA";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 2);
        public static readonly string Pattern = $"^LDGTA\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 10,
            MassDiffDictionary.HydrogenMass * 19,
            MassDiffDictionary.OxygenMass * 5,
            MassDiffDictionary.NitrogenMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.LDGTA, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class LDGTSLipidParser : ILipidParser {
        public string Target { get; } = "LDGTS";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 2);
        public static readonly string Pattern = $"^LDGTS\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 10,
            MassDiffDictionary.HydrogenMass * 19,
            MassDiffDictionary.OxygenMass * 5,
            MassDiffDictionary.NitrogenMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.LDGTS, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class DGCCLipidParser : ILipidParser {
        public string Target { get; } = "DGCC";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^DGCC\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 10,
            MassDiffDictionary.HydrogenMass * 19,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.NitrogenMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.DGCC, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class LDGCCLipidParser : ILipidParser {
        public string Target { get; } = "LDGCC";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 2);
        public static readonly string Pattern = $"^LDGCC\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 10,
            MassDiffDictionary.HydrogenMass * 19,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.NitrogenMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.LDGCC, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class DGGALipidParser : ILipidParser {
        public string Target { get; } = "DGGA";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^DGGA\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 9,
            MassDiffDictionary.HydrogenMass * 14,
            MassDiffDictionary.OxygenMass * 9,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.DGGA, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class DLCLLipidParser : ILipidParser {
        public string Target { get; } = "DLCL";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^DLCL\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 9,
            MassDiffDictionary.HydrogenMass * 20,
            MassDiffDictionary.OxygenMass * 13,
            MassDiffDictionary.PhosphorusMass * 2,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.DLCL, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class EtherLPCLipidParser : ILipidParser {
        public string Target { get; } = "LPC";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildLysoEtherParser(1, 2);
        public static readonly string Pattern = $"^LPC\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 8,
            MassDiffDictionary.HydrogenMass * 18,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.EtherLPC, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class EtherPCLipidParser : ILipidParser {
        public string Target { get; } = "PC";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildEtherParser(2);
        public static readonly string Pattern = $"^PC\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 8,
            MassDiffDictionary.HydrogenMass * 18,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                if (chains.OxidizedCount > 0)
                {
                    return new Lipid(LbmClass.EtherOxPC, Skelton + chains.Mass, chains);
                }
                return new Lipid(LbmClass.EtherPC, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class EtherLPELipidParser : ILipidParser {
        public string Target { get; } = "LPE";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildLysoEtherParser(1, 2);
        public static readonly string Pattern = $"^LPE\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 5,
            MassDiffDictionary.HydrogenMass * 12,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.EtherLPE, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class EtherPELipidParser : ILipidParser {
        public string Target { get; } = "PE";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildEtherParser(2);
        public static readonly string Pattern = $"^PE\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 5,
            MassDiffDictionary.HydrogenMass * 12,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                if (chains.OxidizedCount > 0)
                {
                    return new Lipid(LbmClass.EtherOxPE, Skelton + chains.Mass, chains);
                }
                return new Lipid(LbmClass.EtherPE, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class BMPLipidParser : ILipidParser {
        public string Target { get; } = "BMP";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^BMP\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 6,
            MassDiffDictionary.HydrogenMass * 13,
            MassDiffDictionary.OxygenMass * 8,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.BMP, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class GM3LipidParser : ILipidParser {
        public string Target { get; } = "GM3";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildCeramideParser(2);
        public static readonly string Pattern = $"^GM3\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 23,
            MassDiffDictionary.HydrogenMass * 37,
            MassDiffDictionary.OxygenMass * 18,
            MassDiffDictionary.NitrogenMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.GM3, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class GD1aLipidParser : ILipidParser {
        public string Target { get; } = "GD1a";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildCeramideParser(2);
        public static readonly string Pattern = $"^GD1a\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 48,
            MassDiffDictionary.HydrogenMass * 77,
            MassDiffDictionary.OxygenMass * 36,
            MassDiffDictionary.NitrogenMass * 3,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.GD1a, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class GD1bLipidParser : ILipidParser {
        public string Target { get; } = "GD1b";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildCeramideParser(2);
        public static readonly string Pattern = $"^GD1b\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 48,
            MassDiffDictionary.HydrogenMass * 77,
            MassDiffDictionary.OxygenMass * 36,
            MassDiffDictionary.NitrogenMass * 3,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.GD1b, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class GD2LipidParser : ILipidParser {
        public string Target { get; } = "GD2";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildCeramideParser(2);
        public static readonly string Pattern = $"^GD2\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 42,
            MassDiffDictionary.HydrogenMass * 67,
            MassDiffDictionary.OxygenMass * 31,
            MassDiffDictionary.NitrogenMass * 3,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.GD2, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class GD3LipidParser : ILipidParser {
        public string Target { get; } = "GD3";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildCeramideParser(2);
        public static readonly string Pattern = $"^GD3\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 34,
            MassDiffDictionary.HydrogenMass * 54,
            MassDiffDictionary.OxygenMass * 26,
            MassDiffDictionary.NitrogenMass * 2,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.GD3, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class GM1LipidParser : ILipidParser {
        public string Target { get; } = "GM1";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildCeramideParser(2);
        public static readonly string Pattern = $"^GM1\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 37,
            MassDiffDictionary.HydrogenMass * 61,
            MassDiffDictionary.OxygenMass * 28,
            MassDiffDictionary.NitrogenMass * 2,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.GM1, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class GQ1bLipidParser : ILipidParser {
        public string Target { get; } = "GQ1b";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildCeramideParser(2);
        public static readonly string Pattern = $"^GQ1b\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 70,
            MassDiffDictionary.HydrogenMass * 111,
            MassDiffDictionary.OxygenMass * 52,
            MassDiffDictionary.NitrogenMass * 5,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.GQ1b, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class GT1bLipidParser : ILipidParser {
        public string Target { get; } = "GT1b";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildCeramideParser(2);
        public static readonly string Pattern = $"^GT1b\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 59,
            MassDiffDictionary.HydrogenMass * 94,
            MassDiffDictionary.OxygenMass * 44,
            MassDiffDictionary.NitrogenMass * 4,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.GT1b, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class NGcGM3LipidParser : ILipidParser {
        public string Target { get; } = "NGcGM3";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildCeramideParser(2);
        public static readonly string Pattern = $"^NGcGM3\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 23,
            MassDiffDictionary.HydrogenMass * 37,
            MassDiffDictionary.OxygenMass * 19,
            MassDiffDictionary.NitrogenMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.NGcGM3, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class Ac2PIM1LipidParser : ILipidParser {
        public string Target { get; } = "Ac2PIM1";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildCeramideParser(2);
        public static readonly string Pattern = $"^Ac2PIM1\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 12,
            MassDiffDictionary.HydrogenMass * 21,
            MassDiffDictionary.OxygenMass * 18,
            MassDiffDictionary.PhosphorusMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.Ac2PIM1, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class Ac2PIM2LipidParser : ILipidParser {
        public string Target { get; } = "Ac2PIM2";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildCeramideParser(2);
        public static readonly string Pattern = $"^Ac2PIM2\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 18,
            MassDiffDictionary.HydrogenMass * 31,
            MassDiffDictionary.OxygenMass * 18,
            MassDiffDictionary.PhosphorusMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.Ac2PIM2, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class Ac3PIM2LipidParser : ILipidParser {
        public string Target { get; } = "Ac3PIM2";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildCeramideParser(3);
        public static readonly string Pattern = $"^Ac3PIM2\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 18,
            MassDiffDictionary.HydrogenMass * 30,
            MassDiffDictionary.OxygenMass * 18,
            MassDiffDictionary.PhosphorusMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.Ac3PIM2, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class Ac4PIM2LipidParser : ILipidParser {
        public string Target { get; } = "Ac4PIM2";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildCeramideParser(4);
        public static readonly string Pattern = $"^Ac4PIM2\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 18,
            MassDiffDictionary.HydrogenMass * 29,
            MassDiffDictionary.OxygenMass * 18,
            MassDiffDictionary.PhosphorusMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.Ac4PIM2, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class MIPCLipidParser : ILipidParser {
        public string Target { get; } = "MIPC";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildCeramideParser(2);
        public static readonly string Pattern = $"^MIPC\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 12,
            MassDiffDictionary.HydrogenMass * 21,
            MassDiffDictionary.OxygenMass * 13,
            MassDiffDictionary.PhosphorusMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.MIPC, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class SHexCerLipidParser : ILipidParser {
        public string Target { get; } = "SHexCer";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildCeramideParser(2);
        public static readonly string Pattern = $"^SHexCer\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 6,
            MassDiffDictionary.HydrogenMass * 10,
            MassDiffDictionary.OxygenMass * 8,
            MassDiffDictionary.SulfurMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.SHexCer, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class SMLipidParser : ILipidParser {
        public string Target { get; } = "SM";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildCeramideParser(2);
        public static readonly string Pattern = $"^SM\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 5,
            MassDiffDictionary.HydrogenMass * 12,
            MassDiffDictionary.OxygenMass * 3,
            MassDiffDictionary.NitrogenMass * 1,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.SM, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class PCd5LipidParser : ILipidParser {
        public string Target { get; } = "PC_d5";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^PC_d5\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 8,
            MassDiffDictionary.HydrogenMass * (18-5),
            MassDiffDictionary.Hydrogen2Mass * 5,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.PC_d5, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class PEd5LipidParser : ILipidParser {
        public string Target { get; } = "PE_d5";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^PE_d5\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 5,
            MassDiffDictionary.HydrogenMass * (12-5),
            MassDiffDictionary.Hydrogen2Mass * 5,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.PE_d5, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class PGd5LipidParser : ILipidParser {
        public string Target { get; } = "PG_d5";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^PG_d5\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 6,
            MassDiffDictionary.HydrogenMass * (13-5),
            MassDiffDictionary.Hydrogen2Mass * 5,
            MassDiffDictionary.OxygenMass * 8,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.PG_d5, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class PId5LipidParser : ILipidParser {
        public string Target { get; } = "PI_d5";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^PI_d5\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 9,
            MassDiffDictionary.HydrogenMass * (17-5),
            MassDiffDictionary.Hydrogen2Mass * 5,
            MassDiffDictionary.OxygenMass * 11,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.PI_d5, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class PSd5LipidParser : ILipidParser {
        public string Target { get; } = "PS_d5";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^PS_d5\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 6,
            MassDiffDictionary.HydrogenMass * (12-5),
            MassDiffDictionary.Hydrogen2Mass * 5,
            MassDiffDictionary.OxygenMass * 8,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.PS_d5, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class LPCd5LipidParser : ILipidParser {
        public string Target { get; } = "LPC_d5";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 2);
        public static readonly string Pattern = $"^LPC_d5\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 8,
            MassDiffDictionary.HydrogenMass * (18-5),
            MassDiffDictionary.Hydrogen2Mass * 5,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.LPC_d5, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class LPEd5LipidParser : ILipidParser {
        public string Target { get; } = "LPE_d5";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 2);
        public static readonly string Pattern = $"^LPE_d5\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 5,
            MassDiffDictionary.HydrogenMass * (12-5),
            MassDiffDictionary.Hydrogen2Mass * 5,
            MassDiffDictionary.OxygenMass * 6,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.LPE_d5, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class LPGd5LipidParser : ILipidParser {
        public string Target { get; } = "LPG_d5";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 2);
        public static readonly string Pattern = $"^LPG_d5\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 6,
            MassDiffDictionary.HydrogenMass * (13-5),
            MassDiffDictionary.Hydrogen2Mass * 5,
            MassDiffDictionary.OxygenMass * 8,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.LPG_d5, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class LPId5LipidParser : ILipidParser {
        public string Target { get; } = "LPI_d5";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 2);
        public static readonly string Pattern = $"^LPI_d5\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 9,
            MassDiffDictionary.HydrogenMass * (17-5),
            MassDiffDictionary.Hydrogen2Mass * 5,
            MassDiffDictionary.OxygenMass * 11,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.LPI_d5, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class LPSd5LipidParser : ILipidParser {
        public string Target { get; } = "LPS_d5";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 2);
        public static readonly string Pattern = $"^LPS_d5\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 6,
            MassDiffDictionary.HydrogenMass * (12-5),
            MassDiffDictionary.Hydrogen2Mass * 5,
            MassDiffDictionary.OxygenMass * 8,
            MassDiffDictionary.NitrogenMass,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.LPS_d5, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class TGd5LipidParser : ILipidParser {
        public string Target { get; } = "TG_d5";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(3);
        public static readonly string Pattern = $"^TG_d5\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 3,
            MassDiffDictionary.HydrogenMass * (5-5),
            MassDiffDictionary.Hydrogen2Mass * 5,
            MassDiffDictionary.OxygenMass * 3,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.TG_d5, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class DGd5LipidParser : ILipidParser {
        public string Target { get; } = "DG_d5";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildParser(2);
        public static readonly string Pattern = $"^DG_d5\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 3,
            MassDiffDictionary.HydrogenMass * (6-5),
            MassDiffDictionary.Hydrogen2Mass * 5,
            MassDiffDictionary.OxygenMass * 3,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.DG_d5, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class SMd9LipidParser : ILipidParser {
        public string Target { get; } = "SM_d9";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildCeramideParser(2);
        public static readonly string Pattern = $"^SM_d9\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 5,
            MassDiffDictionary.HydrogenMass * (12-9),
            MassDiffDictionary.Hydrogen2Mass * 9,
            MassDiffDictionary.OxygenMass * 3,
            MassDiffDictionary.NitrogenMass * 1,
            MassDiffDictionary.PhosphorusMass,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.SM_d9, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class CELipidParser : ILipidParser {
        public string Target { get; } = "CE";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 1);
        public static readonly string Pattern = $"^CE\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 27,
            MassDiffDictionary.HydrogenMass * 45,
            MassDiffDictionary.OxygenMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.CE, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}

    public class CEd7LipidParser : ILipidParser {
        public string Target { get; } = "CE_d7";

        private static readonly TotalChainParser chainsParser = TotalChainParser.BuildSpeciesLevelParser(1, 1);
        public static readonly string Pattern = $"^CE_d7\\s*(?<sn>{chainsParser.Pattern})$";
        private static readonly Regex pattern = new Regex(Pattern, RegexOptions.Compiled);

        private static readonly double Skelton = new[]
        {
            MassDiffDictionary.CarbonMass * 27,
            MassDiffDictionary.HydrogenMass * (45-7),
            MassDiffDictionary.Hydrogen2Mass * 7,
            MassDiffDictionary.OxygenMass * 1,
        }.Sum();

        public ILipid Parse(string lipidStr) {
            var match = pattern.Match(lipidStr);
            if (match.Success) {
                var group = match.Groups;
                var chains = chainsParser.Parse(group["sn"].Value);
                return new Lipid(LbmClass.CE_d7, Skelton + chains.Mass, chains);
            }
            return null;
        }
	}
}